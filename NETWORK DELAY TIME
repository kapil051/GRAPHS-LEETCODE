You are given a network of n nodes, labeled from 1 to n. You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.

We will send a signal from a given node k. Return the minimum time it takes for all the n nodes to receive the signal. If it is impossible for all the n nodes to receive the signal, return -1.

 

Example 1:


Input: times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2
Output: 2
Example 2:

Input: times = [[1,2,1]], n = 2, k = 1
Output: 1
Example 3:

Input: times = [[1,2,1]], n = 2, k = 2
Output: -1

**********************************************************************************************************************************************************

class Solution {
public:
    int networkDelayTime(vector<vector<int>>& nums, int n, int k) {
        
        vector<vector<pair<int,int>>> graph(n+1);
        
        for(int i=0;i<nums.size();i++){
            
            graph[nums[i][0]].push_back({nums[i][1],nums[i][2]});
            
        }
        
         vector<int> v(n+1,INT_MAX);
            v[0]=INT_MIN;
             v[k]=0;
        
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
        
             pq.push({k,0});
        
          while(pq.size()){
              
              auto top=pq.top();
                pq.pop();
               
              for(auto i:graph[top.first]){
                  
                  if(top.second+i.second<v[i.first]){
                      v[i.first]=top.second+i.second;
                      pq.push({i.first,top.second+i.second});
                  }
                  
              }
           
          }
        
        int ans=INT_MIN;
        
        for(auto i:v){
            if(i==INT_MAX) return-1;
              ans=max(ans,i);
        }
        
      return ans;  
    }
};
